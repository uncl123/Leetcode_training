双指针滑动窗口
子数组(subarray)一定是原数组里面连续的一段：

给定一个含有 n 个正整数的数组和一个正整数 target 。
找出该数组中满足其总和大于等于 target 的长度最小的子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，
并返回其长度。如果不存在符合条件的子数组，返回 0 。

示例 1：
输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
示例 2：
输入：target = 4, nums = [1,4,4]
输出：1
示例 3：
输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0

Class Solution:
    def minSubArrayLen(self, s：int, nums:List[int])->int:
        left=0
        right=0
        r=len(nums)
        curr_nums=0
        min_length=float('inf')
        while right<r:
              curr_nums+=nums[right]
              while curr_nums>=target:
                    min_length=min(min_length,right-left+1)
                    curr_nums-=nums[left]
                    left+=1
              right+=1
        return min_length if min_length!=float('inf') else 0
          
