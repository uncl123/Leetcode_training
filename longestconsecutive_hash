给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。
请你设计并实现时间复杂度为 O(n) 的算法解决此问题。


示例 1：
输入：nums = [100,4,200,1,3,2]
输出：4
解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。
示例 2：
输入：nums = [0,3,7,2,5,8,4,6,0,1]
输出：9
示例 3：
输入：nums = [1,0,1,2]
输出：3

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        num_set = set(nums)  # 用 set 提高查找速度  哈希集合 如例3:将生成{0,1,2}
        longest = 0

        for num in num_set:
            # 只有当 num 是连续序列的起点时，才开始向后找
            if num - 1 not in num_set:
                current_num = num
                current_streak = 1

                # 一直找 num+1, num+2... 是否存在
                while current_num + 1 in num_set:
                    current_num += 1
                    current_streak += 1

                # 更新最长序列长度
                longest = max(longest, current_streak)

        return longest
